//для терминалов (переменных из лексера) убрать <>
//сделать чтобы из <VAR> можно было считывать ничего (пропустить блок)


//program
<FULL_PROGRAM> -> program id <SCOPE> .

 //var
<VAR> -> var { <VAR_LIST> }
<VAR> -> E

//var list
<VAR_LIST> -> <VARIABLE_DEFINE> <VAR_LIST>
<VAR_LIST> -> E

//var define
<VARIABLE_DEFINE> -> typename <var_array_define_optional> ID ;

//var type
<var_array_define_optional> -> [ number ]
<var_array_define_optional> -> E

//scope
<SCOPE> -> { <VAR> <STATEMENT_LIST> }

//st list
<STATEMENT_LIST> -> <STATEMENT> <STATEMENT_LIST>
<STATEMENT_LIST> -> E

//statement
<STATEMENT> -> <INPUT>
<STATEMENT> -> <OUTPUT>
<STATEMENT> -> <IF>
<STATEMENT> -> <WHILE>
<STATEMENT> -> <PAREN_EXPR>
<STATEMENT> -> <EXPR>
<STATEMENT> -> <variable> = value ;
<STATEMENT> -> <variable> = { valueList } ;

<valueList> -> term , <valueList>
<valueList> -> E

//input			  
<INPUT> -> read ( <ID> ) ;

//output
//TODO: print id? может положить id внутрь чего-то?
<OUTPUT> -> print <PAREN_EXPR> ;
<OUTPUT> -> print <ID> ;

//if
<IF> -> if <PAREN_EXPR> <SCOPE> <IF_ENDING>
<IF_ENDING> -> E
<IF_ENDING> -> else <SCOPE>

//while
<WHILE> -> while <PAREN_EXPR> <SCOPE>

//paren expr
<PAREN_EXPR> -> ( <EXPR> )

//expr
<EXPR> -> <arithmetic_expression>
<EXPR> -> <bool_expression>


//term
<term> -> <variable>
<term> -> <paren_expression>
<term> -> <expression>
<term> -> value

<variable> -> id
<variable> -> id [ number ]


//arithmetic expression
<arithmetic_symbol> -> +
<arithmetic_symbol> -> -
<arithmetic_symbol> -> *
<arithmetic_symbol> -> /
<arithmetic_symbol> -> %


<arithmetic_beginning> -> +
<arithmetic_beginning> -> -
<arithmetic_beginning> -> E

<arithmetic_expression_basic> -> <arithmetic_beginning> <term>

<arithmetic_expression> -> <arithmetic_expression_basic> <arithmetic_expression_increase>

<arithmetic_expression_increase> -> <arithmetic_expression_basic> <arithmetic_symbol> <term> <arithmetic_expression_increase>
<arithmetic_expression_increase> -> E;



//bool expression
<bool_expression> -> <bool_expression_basic> <bool_expression_increase>

<bool_expression_basic> -> <bool_expression_beginning> <term>
<bool_expression_beginning> -> !
<bool_expression_beginning> -> E

<bool_expression_increase> -> <bool_expression_basic> <bool_symbol> <bool_expression_basic> <bool_expression_increase>
<bool_expression_increase> -> E;

//bool expr inc
<bool_symbol> -> <
<bool_symbol> -> >
<bool_symbol> -> <=
<bool_symbol> -> >=
<bool_symbol> -> ==
<bool_symbol> -> !=
<bool_symbol> -> &&
<bool_symbol> -> ||


program test
{
	var
	{
		int a;
		bool isEmpty;
	}
	
	statements...
}.
