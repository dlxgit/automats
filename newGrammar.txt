//для терминалов (переменных из лексера) убрать <>
//сделать чтобы из <VAR> можно было считывать ничего (пропустить блок)


//program
<FULL_PROGRAM> -> program id <SCOPE> .

 //var
<VAR> -> var { <VAR_LIST> }

//var list
<VAR_LIST> -> <VARIABLE_DEFINE>
<VAR_LIST> -> <VARIABLE_DEFINE> <VAR_LIST>

//var define
<VARIABLE_DEFINE> -> <VARIABLE_TYPE> <ID> ;

//var type
<VARIABLE_TYPE> -> bool
<VARIABLE_TYPE> -> int
<VARIABLE_TYPE> -> bool [ number ]
<VARIABLE_TYPE> -> int [ number ]

//scope
<SCOPE> -> { <VAR> <STATEMENT_LIST> }  //если сделаю var, то оставить просто <STATEMENT_LIST>
<SCOPE> -> { <STATEMENT_LIST> }

//st list
<STATEMENT_LIST> -> <STATEMENT>
<STATEMENT_LIST> ->  <STATEMENT_LIST>

//statement
<STATEMENT> -> <INPUT>
<STATEMENT> -> <OUTPUT>
<STATEMENT> -> <IF>
<STATEMENT> -> <WHILE>
<STATEMENT> -> <PAREN_EXPR>
<STATEMENT> -> <EXPR>
			  
//input			  
<INPUT> -> read ( <ID> ) ;

//output
//TODO: print id? может положить id внутрь чего-то?
<OUTPUT> -> print <PAREN_EXPR> ;
<OUTPUT> -> print <ID> ;

//if
<IF> -> if <PAREN_EXPR> SCOPE
<IF> -> if <PAREN_EXPR> SCOPE else SCOPE

//while
<WHILE> -> while <PAREN_EXPR> SCOPE

//paren expr
<PAREN_EXPR> -> ( <EXPR> )

//expr
<EXPR> -> <arithmetic_expression>
<EXPR> -> <bool_expression>

//приоритет операций +-/* (сначала унарный минус и скобки, */, +-)
//term
<term> -> <variable>
<term> -> <array_element>
<term> -> <paren_expression>
<term> -> <expression>
<term> -> <value>


//arithmetic expression
<arithmetic_symbol> -> +
<arithmetic_symbol> -> -
<arithmetic_symbol> -> *
<arithmetic_symbol> -> /
<arithmetic_symbol> -> %


<arithmetic_beginning> -> +
<arithmetic_beginning> -> -
<arithmetic_beginning> -> E

<arithmetic_expression_basic> -> <arithmetic_beginning> <term>

<arithmetic_expression> -> <arithmetic_expression_basic>
<arithmetic_expression> -> <arithmetic_expression_basic> <arithmetic_expression_increase>

//arithmetic expr inc

<arithmetic_expression_increase> -> <arithmetic_expression_basic> <arithmetic_expression_increase>
<arithmetic_expression_increase> -> E;

//bool expression
<bool_expression_beginning> -> !
<bool_expression_beginning> -> E

<bool_expression_basic> -> <bool_expression_beginning> <term>
<bool_expression> -> <bool_expression_increase>

//bool expr inc
<bool_symbol> -> <
<bool_symbol> -> >
<bool_symbol> -> <=
<bool_symbol> -> >=
<bool_symbol> -> ==
<bool_symbol> -> !=
<bool_symbol> -> &&
<bool_symbol> -> ||

<bool_expression_increase> -> <bool_expression_basic> <bool_symbol> <bool_expression_increase> 
<bool_expression_increase> -> E;
			

program test
{
	var
	{
		int a;
		bool isEmpty;
	}
	
	statements...
}.
