//для терминалов (переменных из лексера) убрать <>
//сделать чтобы из <VAR> можно было считывать ничего (пропустить блок)
//TODO: что с ; в стейтментах?

//program
<FULL_PROGRAM> -> program id <SCOPE> .

 //var
<VAR> -> var { <VAR_LIST> }
<VAR> -> E

//var list
<VAR_LIST> -> <VARIABLE_DEFINE> <VAR_LIST>
<VAR_LIST> -> E

//var define
<VARIABLE_DEFINE> -> typename <var_array_define_optional> ID ;

//var type
<var_array_define_optional> -> [ number ]
<var_array_define_optional> -> E

//scope
<SCOPE> -> { <VAR> <STATEMENT_LIST> }

//st list
<STATEMENT_LIST> -> <STATEMENT> ; <STATEMENT_LIST>
<STATEMENT_LIST> -> E

//statement
<STATEMENT> -> <INPUT>
<STATEMENT> -> <OUTPUT>
<STATEMENT> -> <IF>
<STATEMENT> -> <WHILE>
<STATEMENT> -> <PAREN_EXPR>
<STATEMENT> -> <variable> = <assign_variable>
<STATEMENT> -> <EXPR>


<valueList> -> <EXPR> <valueList_append>

<valueList_append> -> , <EXPR> <valueList_append>
<valueList_append> -> E

<assign_variable> -> <EXPR>
<assign_variable> -> <valueList>


//input			  
<INPUT> -> read ( <ID> ) ;

//output
<OUTPUT> -> print <PAREN_EXPR> ;

//if
<IF> -> if <PAREN_EXPR> <SCOPE> <IF_ENDING>
<IF_ENDING> -> E
<IF_ENDING> -> else <SCOPE>

//while
<WHILE> -> while <PAREN_EXPR> <SCOPE>

//paren expr
<PAREN_EXPR> -> ( <EXPR> )

//expr
<EXPR> -> <arithmetic_expression>
<EXPR> -> <bool_expression>


//term
<term> -> <variable>
<term> -> value


<variable> -> id <var_array_define_optional>


//arithmetic expression
<arithmetic_symbol> -> +
<arithmetic_symbol> -> -
<arithmetic_symbol> -> *
<arithmetic_symbol> -> /
<arithmetic_symbol> -> %



<arithmetic_expression_basic> -> + <term>
<arithmetic_expression_basic> -> - <term>
<arithmetic_expression_basic> -> <term>

<arithmetic_expression> -> <arithmetic_expression_basic> <arithmetic_expression_increase>

<arithmetic_expression_increase> -> <arithmetic_expression_basic> <arithmetic_expression_increase_second>
<arithmetic_expression_increase> -> E;
<arithmetic_expression_increase_second> - > <arithmetic_symbol> <term> <arithmetic_expression_increase>
<arithmetic_expression_increase_second> - > E

3 + 1

arithmetic_expression_basic  


//bool expression
<bool_expression> -> <bool_expression_basic> <bool_expression_increase>

<bool_expression_basic> -> ! <term>
<bool_expression_basic> -> <term>

<bool_expression_increase> -> <bool_expression_basic> <bool_symbol> <bool_expression_basic> <bool_expression_increase>
<bool_expression_increase> -> E;

//bool expr inc
<bool_symbol> -> <
<bool_symbol> -> >
<bool_symbol> -> <=
<bool_symbol> -> >=
<bool_symbol> -> ==
<bool_symbol> -> !=
<bool_symbol> -> &&
<bool_symbol> -> ||

(+3)
(3)
((3+3) + (4+5) 1)

paren_expr = (expr)
paren_expr = (paren_expr) paren_expr_append

paren_expr_append = mid basic_expr
paren_expr_append = E

expr = paren_expr
expr = basic_expr

basic_expr = <arithmetic_beginning> term <basic_expr_increase>

basic_expr = (<arithmetic_beginning> term <increase_paren>

<basic_expr_increase> = <mid> term <basic_expr_increase>
<basic_expr_increase> = E

<increase_paren> = <basic_expr_increase> ) <increase_paren>
<increase_paren> = )



(3 + 2 + (4+5) 1)

<expr> = <beginning> <term> <binary_ending>
<expr> = (<expr>) mid expr
<expr> = <expr> mid expr
<expr> = (<expr>)

<expr_optional_append>

(
    (
        3 + 2
    )
)


<binary_ending> = <mid> expr
<binary_ending> = E




program test
{
	var
	{
		int a;
		bool isEmpty;
	}
	
	statements...
}.
